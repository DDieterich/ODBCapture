
--
--  Create ODBCAPTURE.GRAB_RAS Package Body
--

set define off


--DBMS_METADATA:ODBCAPTURE.GRAB_RAS

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "ODBCAPTURE"."GRAB_RAS" 
as


------------------------------------------------------------
-- Grant Real Application Security (RAS) Administrative Permissions
--
--  Note1: This created source code may or may not be running in the Oracle Cloud
--  Note2: RAS may or may not be installed in the database running this source code.
--
procedure grb_usr
      (fh          in out NOCOPY  fh2.sf_ptr_type
      ,in_grantee  in             varchar2)
as
   first_pass  boolean := TRUE;
begin
   for buff in (select privilege
                 from  dba_xs_aces
                 where acl       = 'SYSTEMACL'
                  and  principal = in_grantee
                 order by privilege)
   loop
      if first_pass
      then
         first_pass := FALSE;
         fh2.script_put_line(fh, q'{}');
         fh2.script_put_line(fh, q'{-- Real Application Security System Grants}');
         fh2.script_put_line(fh, q'{}');
      end if;
      fh2.script_put_line(fh, q'{}');
      fh2.script_put_line(fh, q'{prompt XS Admin Grant "}' || buff.privilege || q'{" to "}' || in_grantee || q'{"}');
      fh2.script_put_line(fh, q'{begin}');
      fh2.script_put_line(fh, q'{   execute immediate 'begin' ||}');
      fh2.script_put_line(fh, q'{                     '  xs_admin_util.grant_system_privilege(''}' ||
                                                            buff.privilege || q'{'', ''}' || in_grantee || q'{''); ' ||}');
      fh2.script_put_line(fh, q'{                     'end;';}');
      fh2.script_put_line(fh, q'{exception when others then}');
      fh2.script_put_line(fh, q'{   if    SQLERRM not like '%PLS-00201: identifier ''XS_ADMIN_UTIL.GRANT_SYSTEM_PRIVILEGE'' must be declared%'}');
      fh2.script_put_line(fh, q'{     AND SQLERRM not like '%ORA-01031: insufficient privileges%'}');
      fh2.script_put_line(fh, q'{   then}');
      fh2.script_put_line(fh, q'{      raise;}');
      fh2.script_put_line(fh, q'{   end if;}');
      fh2.script_put_line(fh, q'{end;}');
      fh2.script_put_line(fh, q'{/}');
      fh2.script_put_line(fh, q'{}');
      fh2.script_put_line(fh, q'{prompt XS Admin Cloud Grant "}' || buff.privilege || q'{" to "}' || in_grantee || q'{"}');
      fh2.script_put_line(fh, q'{begin}');
      fh2.script_put_line(fh, q'{   execute immediate 'begin' ||}');
      fh2.script_put_line(fh, q'{                     '  xs_admin_cloud_util.grant_system_privilege(''}' ||
                                                            buff.privilege || q'{'', ''}' || in_grantee || q'{''); ' ||}');
      fh2.script_put_line(fh, q'{                     'end;';}');
      fh2.script_put_line(fh, q'{exception when others then}');
      fh2.script_put_line(fh, q'{   if SQLERRM not like '%PLS-00201: identifier ''XS_ADMIN_CLOUD_UTIL.GRANT_SYSTEM_PRIVILEGE'' must be declared%'}');
      fh2.script_put_line(fh, q'{   then}');
      fh2.script_put_line(fh, q'{      raise;}');
      fh2.script_put_line(fh, q'{   end if;}');
      fh2.script_put_line(fh, q'{end;}');
      fh2.script_put_line(fh, q'{/}');
      fh2.script_put_line(fh, q'{}');
   end loop;
end grb_usr;


------------------------------------------------------------
-- Disable Real Application Security (RAS) Enforcement
procedure disable_policy
      (in_schema  in  varchar2
      ,in_object  in  varchar2)
is
begin
   for buff in (select t.policy_owner, t.policy
                 from  dba_xs_applied_policies t
                 where t.schema = in_schema
                  and  t.object = in_object
                  and  t.status = 'ENABLED'
                 order by t.policy_owner, t.policy)
   loop
      begin
         insert into exporting_ras_data
               (   schema,    object,      policy_owner,      policy)
            values
               (in_schema, in_object, buff.policy_owner, buff.policy);
         commit;
      exception when DUP_VAL_ON_INDEX then
         null;  -- Ignore this exception
      end;
      xs_data_security.disable_object_policy
         (schema => in_schema
         ,object => in_object
         ,policy => '"' || buff.policy_owner || '"."' ||
                           buff.policy       || '"'   );
   end loop;
end disable_policy;


------------------------------------------------------------
-- Enable Real Application Security (RAS) Enforcement
procedure enable_policy
      (in_schema  in  varchar2
      ,in_object  in  varchar2)
is
begin
   for buff in (select t.policy_owner, t.policy
                 from  exporting_ras_data t
                 where t.schema = in_schema
                  and  t.object = in_object
                 order by t.policy_owner, t.policy)
   loop
      xs_data_security.enable_object_policy
         (schema => in_schema
         ,object => in_object
         ,policy => '"' || buff.policy_owner || '"."' ||
                           buff.policy       || '"'   );
      delete from exporting_ras_data t
       where t.schema       = in_schema
        and  t.object       = in_object
        and  t.policy_owner = buff.policy_owner
        and  t.policy       = buff.policy;
      commit;
   end loop;
end enable_policy;


------------------------------------------------------------
-- Create Real Application Security (RAS) Access Control Lists
procedure grb_racl
as
   ELMNT           CONSTANT varchar2(100) := 'RAS_ACL';
   fh              fh2.sf_ptr_type;  -- object script file handle
   l_DDL_handle    NUMBER;
   l_XForm_handle  NUMBER;
   old_file        varchar2(1000) := 'This is not a real file name !@#$%^';
   ----------------------------------------
   procedure l_close_file as
      l_file_name  varchar2(1000) :=
                   fh2.sf_aa(fh.bld_type)(fh.bld_ord)(fh.file_id).filename;
   begin
      --
      fh2.script_put_line(fh, 'set define on');
      fh2.script_close(fh);
      --
      fh := fh2.script_open(in_filename     => 'odbcapture_installation_logs.csv'
                           ,in_elmnt        => 'INSTALL_SCRIPT'
                           ,in_max_linesize => common_util.MAXIMUM_SQL_LENGTH);
      fh2.script_put_line(fh, '"' || grab_scripts.g_build_type ||
                            '","' || l_file_name || '.log"' );
      fh2.script_close(fh);
      --
   end l_close_file;
   ----------------------------------------
begin
   --ELMNT: RAS_ACL, g_build_type: grbtst, g_schema_name: SYS, RAS_ACL
   --dbms_output.put_line('ELMNT: ' || ELMNT || ', g_build_type: ' || grab_scripts.g_build_type ||
   --                     ', g_schema_name: ' || grab_scripts.g_schema_name || ', ' || ELMNT);
   for buf1 in (select 'RAS_Admin_' ||owner || '.' || file_ext1    FILE_NAME
                      ,owner
                      ,build_type_selector
                 from  priv_obj_racl_view
                 where build_type = grab_scripts.g_build_type
                 -- and  owner        = grab_scripts.g_schema_name  (All Schema)
                 order by owner
                      ,build_type_selector)
   loop
      if old_file != buf1.file_name
      then
         old_file := buf1.file_name;
         if fh2.script_is_open(fh)
         then
            l_close_file;
         end if;
         fh := fh2.script_open(in_filename     => buf1.file_name
                              ,in_elmnt        => ELMNT
                              ,in_max_linesize => common_util.MAXIMUM_SQL_LENGTH);
         fh2.script_put_line(fh, '');
         fh2.script_put_line(fh, '--');
         fh2.script_put_line(fh, '-- Create RAS ACLs for RAS Administrator ' || buf1.owner);
         fh2.script_put_line(fh, '--  NOTE: This is a "' || buf1.build_type_selector || '" RAS ACL');
         fh2.script_put_line(fh, '--');
         fh2.script_put_line(fh, '-- To disable RAS ACLs for data loading/unloading, use:');
         for buf2 in (select t.schema, t.policy, t.object
                       from  dba_xs_applied_policies t
                       where t.policy_owner = buf1.owner
                       order by t.policy_owner, t.policy, t.object)
         loop
            fh2.script_put_line(fh, '--begin');
            fh2.script_put_line(fh, '--   xs_data_security.disable_object_policy'          );
            fh2.script_put_line(fh, '--      (policy  => ''"' || buf1.owner  ||
                                                        '"."' || buf2.policy || '"''');
            fh2.script_put_line(fh, '--      ,schema  => '''  || buf2.schema ||  '''');
            fh2.script_put_line(fh, '--      ,object  => '''  || buf2.object ||  '''');
            fh2.script_put_line(fh, '--      );' );
            fh2.script_put_line(fh, '--end;');
            fh2.script_put_line(fh, '--/');
         end loop;
         fh2.script_put_line(fh, '--');
         fh2.script_put_line(fh, '');
         fh2.script_put_line(fh, 'set define off');
         fh2.script_put_line(fh, '');
         fh2.script_put_line(fh, '');
      end if;
      fh2.script_put_line(fh, '-- RAS Defined Roles');
      fh2.script_put_line(fh, '');
      for buf2 in (select t.name from dba_xs_principals t
                    where t.type = 'ROLE'
                     and  t.name not like 'XS%'
                    order by t.name)
      loop
         fh2.script_put_line(fh, 'prompt ' || buf2.name || '.XS_ROLE');
         fh2.script_put_line(fh, '--DBMS_METADATA:' || buf2.name || '.XS_ROLE');
         fh2.put_big_line(fh, buf1.owner || '.' || buf2.name || ' XS_ROLE'
                             ,DBMS_METADATA.get_ddl(object_type => 'XS_ROLE'
                                                   ,name        => buf2.name)
                             ,common_util.MAXIMUM_SQL_LENGTH);
         fh2.script_put_line(fh, '');
      end loop;
      fh2.script_put_line(fh, '');
      fh2.script_put_line(fh, '-- RAS Defined Users');
      fh2.script_put_line(fh, '');
      for buf2 in (select t.name from dba_xs_principals t
                    where t.type = 'USER'
                     and  t.name not like 'XS%'
                    order by t.name)
      loop
         fh2.script_put_line(fh, 'prompt ' || buf2.name || '.XS_USER');
         fh2.script_put_line(fh, '--DBMS_METADATA:' || buf2.name || '.XS_USER');
         -- Need to catch this failure:
         -- ORA-31603: object "GRB_TEST_USER_01" of type XS_USER not found in schema "ODBCAPTURE"
         begin
            fh2.put_big_line(fh, buf1.owner || '.' || buf2.name || ' XS_USER'
                                ,DBMS_METADATA.get_ddl(object_type => 'XS_USER'
                                                      ,name        => buf2.name)
                                ,common_util.MAXIMUM_SQL_LENGTH);
         exception when others then
            if SQLCODE = -31603
            then
               dbms_output.put_line(SQLERRM || CHR(10) ||
                                    dbms_utility.format_error_backtrace ||
                                    dbms_utility.format_call_stack);
            else
               raise;
            end if;
         end;
         fh2.script_put_line(fh, '');
      end loop;
      fh2.script_put_line(fh, '');
      fh2.script_put_line(fh, '-- Database Role Grants to RAS Principals');
      fh2.script_put_line(fh, '-- DBMS_METADATA: "XS_ROLE_GRANT" doesn''t do this');
      fh2.script_put_line(fh, '');
      for buf2 in (select t.granted_role, t.grantee from dba_xs_role_grants t
                    where t.granted_role_type = 'DATABASE'
                     and  t.granted_role not like 'XS%'
                    order by t.granted_role, t.grantee)
      loop
         fh2.script_put_line(fh, 'prompt grant "' || buf2.granted_role ||
                                         '" to "' || buf2.grantee || '";');
         fh2.script_put_line(fh, 'grant "' || buf2.granted_role ||
                                           '" to "' || buf2.grantee || '";');
         fh2.script_put_line(fh, '');
      end loop;
      fh2.script_put_line(fh, '');
      fh2.script_put_line(fh, '-- RAS Role Grants to RAS Principals');
      fh2.script_put_line(fh, '-- Note: DBMS_METADATA XS_ROLE_GRANT won''t work with multiple users per role');
      fh2.script_put_line(fh, '');
      for buf2 in (select t.grantee, t.granted_role from dba_xs_role_grants t
                    where t.grantee in (select distinct t2.principal from dba_xs_aces t2
                                         where t2.owner = buf1.owner)
                    order by t.grantee, t.granted_role)
      loop
         --fh2.script_put_line(fh, '-- DBMS_METADATA: ' || buf2.granted_role || '.XS_ROLE_GRANT');
         --fh2.put_big_line(fh, buf1.owner || '.' || buf2.granted_role || ' XS_ROLE_GRANT'
         --                         ,dbms_metadata.get_ddl(object_type => 'XS_ROLE_GRANT'
         --                                               ,name        => buf2.granted_role)
         --                         ,common_util.MAXIMUM_SQL_LENGTH);
         fh2.script_put_line(fh, 'prompt principal grant "' || buf2.granted_role ||
                                                   '" to "' || buf2.grantee || '";');
         fh2.script_put_line(fh, 'BEGIN');
         fh2.script_put_line(fh, '  xs_principal.grant_roles(grantee => ''"' || buf2.grantee || '"'', ');
         fh2.script_put_line(fh, '     role => ''"' || buf2.granted_role || '"'');');
         fh2.script_put_line(fh, 'END;');
         fh2.script_put_line(fh, '/');
         fh2.script_put_line(fh, '');
      end loop;
      fh2.script_put_line(fh, '');
      fh2.script_put_line(fh, '--------------------------------------');
      fh2.script_put_line(fh, '-- RAS ACLs Owned by RAS Administrator');
      fh2.script_put_line(fh, '--------------------------------------');
      fh2.script_put_line(fh, '');
      fh2.script_put_line(fh, '');
      for buf2 in (select t.name from dba_xs_acls t
                    where t.owner = buf1.owner
                    order by t.name)
      loop
         fh2.script_put_line(fh, 'prompt ' || buf2.name || '.XS_ACL');
         fh2.script_put_line(fh, '--DBMS_METADATA:' || buf2.name || '.XS_ACL');
         fh2.put_big_line(fh, buf1.owner || '.' || buf2.name || ' XS_ACL'
                             ,DBMS_METADATA.get_ddl(object_type => 'XS_ACL'
                                                   ,name        => buf2.name
                                                   ,schema      => buf1.owner)
                             ,common_util.MAXIMUM_SQL_LENGTH);
         for buf3 in (select distinct t.acl from dba_xs_acl_parameters t
                       where t.acl       = buf2.name
                        and  t.acl_owner = buf1.owner
                       order by t.acl)
         loop
            fh2.script_put_line(fh, 'prompt ' || buf3.acl || '.XS_ACL_PARAM');
            fh2.script_put_line(fh, '--DBMS_METADATA:' || buf3.acl || '.XS_ACL_PARAM');
            fh2.put_big_line(fh, buf1.owner || '.' || buf3.acl || ' XS_ACL_PARAM'
                                ,DBMS_METADATA.get_ddl(object_type => 'XS_ACL_PARAM'
                                                      ,name        => buf3.ACL
                                                      ,schema      => buf1.owner)
                                ,common_util.MAXIMUM_SQL_LENGTH);
         end loop;
         fh2.script_put_line(fh, '');
      end loop;
      fh2.script_put_line(fh, '');
      fh2.script_put_line(fh, '----------------------------------------------------');
      fh2.script_put_line(fh, '-- Policies for RAS Admininistrator (includes REALM)');
      fh2.script_put_line(fh, '----------------------------------------------------');
      fh2.script_put_line(fh, '');
      fh2.script_put_line(fh, '');
      for buf2 in (select t.policy from dba_xs_applied_policies t
                    where t.POLICY_OWNER = buf1.owner
                    order by t.policy)
      loop
         fh2.script_put_line(fh, 'prompt ' || buf2.policy || '.XS_DATA_SECURITY');
         fh2.script_put_line(fh, '--DBMS_METADATA:' || buf2.policy || '.XS_DATA_SECURITY');
         fh2.script_put_line(fh, '--  For UNKNOWN reasons: Need to change from this:');
         fh2.script_put_line(fh, '--    dbms_xds.enable_xds(');
         fh2.script_put_line(fh, '--       object_schema => ''ODBCAPTURE'',');
         fh2.script_put_line(fh, '--       object_name => ''GRBTST_$NAME'',');
         fh2.script_put_line(fh, '--       policy_name => ''"ODBCTEST"."GRB_TEST_POLICY_01"'');');
         fh2.script_put_line(fh, '--  To this for use with Autonomous Database Service in Oracle Cloud:');
         fh2.script_put_line(fh, '--    xs_data_security.apply_object_policy(');
         fh2.script_put_line(fh, '--       schema => ''ODBCAPTURE'',');
         fh2.script_put_line(fh, '--       object => ''GRBTST_$NAME'',');
         fh2.script_put_line(fh, '--       policy => ''"ODBCTEST"."GRB_TEST_POLICY_01"'');');
         fh2.put_big_line(fh, buf1.owner || '.' || buf2.policy || ' XS_DATA_SECURITY'
                                  ,replace
                                      (replace
                                         (replace
                                            (replace
                                               (DBMS_METADATA.get_ddl(object_type => 'XS_DATA_SECURITY'
                                                                     ,name        => buf2.policy
                                                                     ,schema      => buf1.owner )
                                               ,' dbms_xds.enable_xds('
                                               ,' xs_data_security.apply_object_policy(' )
                                            ,' object_schema => '
                                            ,' schema => ' )
                                         ,' object_name => '
                                         ,' object => ' )
                                      ,' policy_name => '
                                      ,' policy => ' )
                                  ,common_util.MAXIMUM_SQL_LENGTH);
         fh2.script_put_line(fh, '');
      end loop;
      fh2.script_put_line(fh, '');
   end loop;
   if fh2.script_is_open(fh)
   then
      l_close_file;
   end if;
end grb_racl;


end grab_ras;
/

set define on
